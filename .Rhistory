makeCacheMatrix <- function(x = matrix()) {
invCached <- matrix(data = NA, nrow = 1,                # set cached inverse matrix to "empty"
ncol = 1, byrow = FALSE,
dimnames = NULL)
set <- function(y) {                                    # method to store data matrix
x <<- y
invCached <<- matrix(NA, 1, 1, FALSE, NULL)     # reset cached inverse to "empty"
}
get <- function() x                                     # method to retrieve data matrix
setInverse <- function(inverse) invCached <<- inverse   # method to store mean
getInverse <- function() invCached                      # method to retrieve mean
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()               # retrieve cached inverse
if(!is.na(inverse[1,1])) {              # if not empty, return cached inverse
message("getting cached
inverse matrix")
return(inverse)                 # use invisible(inverse) to suppress print()
}
data <- x$get()                         # otherwise get cached data
inverse <- solve(data, ...)             # calculate the inverse
x$setInverse(inverse)                   # save the inverse into cache
inverse
}
size <- 10                                      # create data (square matrix)
mydata <- matrix(rnorm(size*size), size, size)
M1 <- makeCacheMatrix()                         # create caching data structure
M1
environment(M1)
M1$set(mydata)                                  # place data into structure
M1$getInverse()                                 # get inverse (empty at this point)
imat <- cacheSolve(M1)                          # calculate the inverse
imat_cached <- cacheSolve(M1)                   # caculate the inverse again (retrieved cached value)
identical(imat, imat_cached)                    # verify inverse and cached inversed are the same
test <- mydata %*% imat                         # verify matrix %*% inverse = identity matrix
View(test)
## R Programming - April 2014
## Programming Assignment 2 - Caching the Inverse of a Matrix
##
# In this example we introduce the <<- operator which can be used to assign a
# value to an object in an environment that is different from the current
# environment.
# Below are two functions that are used to create a special object
# that stores a matrix and cache's its inverse.
#
# The first function, makeVector creates a special "vector", which is really a
# list containing a function to:
# - set the matrix
# - get matrix
# - set matrix inverse
# - get matrix inverse
makeCacheMatrix <- function(x = matrix()) {
invCached <- matrix(data = NA, nrow = 1,                # set cached inverse matrix to "empty"
ncol = 1, byrow = FALSE,
dimnames = NULL)
set <- function(y) {                                    # method to store data matrix
x <<- y
invCached <<- matrix(NA, 1, 1, FALSE, NULL)     # reset cached inverse to "empty"
}
get <- function() x                                     # method to retrieve data matrix
setInverse <- function(inverse) invCached <<- inverse   # method to store mean
getInverse <- function() invCached                      # method to retrieve mean
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
# The second function calculates the inverse of the object. It checks to see if the inverse
# has already been calculated. Ff not, it calculates the inverse and stores it
# in the object.  Returns a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
inverse <- x$getInverse()               # retrieve cached inverse
if(!is.na(inverse[1,1])) {              # if not empty, return cached inverse
message("getting cached inverse matrix")
return(inverse)                 # use invisible(inverse) to suppress print()
}
data <- x$get()                         # otherwise get cached data
inverse <- solve(data, ...)             # calculate the inverse
x$setInverse(inverse)                   # save the inverse into cache
inverse
}
# Now use these functions to generate an inverse matrix and cache it. Verify that
# the calculated and cached inverses are identical Verify that the matrix
# multiplied by its inverse is equal to the identity matrix
size <- 10                                       # create test data (square matrix)
mydata <- matrix(rnorm(size*size), size, size)
mat <- makeCacheMatrix()                         # create caching data structure
mat
mat$set(mydata)                                  # place data into structure
mat$getInverse()                                 # get inverse (empty at this point)
imat <- cacheSolve(mat)                          # calculate the inverse
imat_cached <- cacheSolve(mat)                   # caculate the inverse again (retrieved cached value)
identical(imat, imat_cached)                     # verify inverse and cached inversed are the same
test <- mydata %*% imat                          # verify matrix %*% inverse = identity matrix
View(test)
Food_Display_Table <- read.table("~/Downloads/MyFoodapediaData/Food_Display_Table.xml", quote="\"")
View(Food_Display_Table)
Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis.Related_Groups__DRG_ <- read.csv("~/Downloads/Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis-Related_Groups__DRG_.csv")
View(Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis.Related_Groups__DRG_)
R.Version()
install.packages("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "./data/NGAP.xlsx", method ="curl")
library(xlsx)
rowIndex <- 18:23
colIndex <- 7:15
dat <- read.xlsx("./data/NGAP.xlsx,sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex")
?read.xlsx
?xlsx
dat <- read.xlsx("./data/NGAP.xlsx, sheetIndex=0 ,colIndex=colIndex, rowIndex=rowIndex")
dat <- read.xlsx("./data/NGAP.xlsx, sheetIndex=1 ,colIndex=colIndex, rowIndex=rowIndex")
install.packages("RMySQL")
install.packages(c("MASS", "swirl"))
install.packages("RMySQL")
install.packages("shiny")
install.packages("shinyapps")
install.packages("devtools")
if (!file.exists("data")) {
dir.create("data")
}
library(R.utils)       #for bzunzip
fileDir <- "./data/"
fileZipName <- "repdata-data-StormData.csv.bz2"
fileName <- "repdata-data-StormData.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
filePath <- paste0(fileDir, fileZipName)
if (!file.exists(filePath)) {
download.file(fileUrl, destfile = filePath, method ="curl")
bunzip2(filePath, exdir=fileDir, remove=FALSE)
dateDownloaded <- date()
}
fileName2 <- "repdata-peer2_doc-pd01016005curr.pdf"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2Fpd01016005curr.pdf"
filePath2 <- paste0(fileDir, fileName2)
if (!file.exists(filePath2)) {
download.file(fileUrl2, destfile = filePath2, method ="curl")
dateDownloaded <- date()
}
fileName3 <- "repdata-peer2_doc-NCDC Storm Events-FAQ Page.pdf"
fileUrl3 <- "https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2FNCDC%20Storm%20Events-FAQ%20Page.pdf"
filePath3 <- paste0(fileDir, fileName3)
if (!file.exists(filePath3)) {
download.file(fileUrl3, destfile = filePath3, method ="curl")
dateDownloaded <- date()
}
raw <- read.csv(paste0(fileDir, fileName))
data <- subset(raw, na.omit=TRUE, select=c(EVTYPE, FATALITIES, INJURIES, PROPDMG,PROPDMGEXP))
?tapply
injured <- with(data, tapply(INJURIES, EVTYPE, sum))
View(data)
foo <- tapply(data$FATALITIES, data$EVTYPE, sum)
foo <- tapply(data$INJURIES, data$EVTYPE, sum)
str(foo)
str(injured)
library(ggplot2)
qplot(foo)
qplot(foo ~ data$EVTYPE)
qplot(foo, data$EVTYPE)
barplot(foo, data$EVTYPE)
foo
injured <- sort(injured, decreasing = TRUE)
foo <- sort(foo, decreasing = TRUE)
barplot(foo, names=foo)
barplot(head(data), names=EVTYPE)
barplot(head(data), names=data$EVTYPE)
View(data)
barplot(data$INJURIES, names=data$EVTYPE)
injured_by_event <- with(data, tapply(INJURIES, EVTYPE, sum))
injured_by_event <- sort(injured_by_event, decreasing = TRUE)
top_injury_events <- head(injured_by_event, n=20L)
injured_by_event <- tapply(data$INJURIES, data$EVTYPE, sum)
injured_by_event <- sort(injured_by_event, decreasing = TRUE)
top_injury_events <- head(injured_by_event, n=20L)
plot(top_injury_events)
qplot(top_injury_events)
str(top_injury_events)
foo <- as.data.frame(top_injury_events)
View(foo)
names(top_injury_events)
aggdata <-aggregate(data, by=list(FATALITIES, INJURIES), FUN=sum)
aggdata <-aggregate(data, by=list(EVTYPE), FUN=sum)
aggdata <-aggregate(data, by=list(INJURIES), FUN=sum)
injured_by_event <- tapply(data$INJURIES, data$EVTYPE, sum, simplify = TRUE)
injured_by_event <- sort(injured_by_event, decreasing = TRUE)
top_injury_events <- head(injured_by_event, n=20L)
plot(top_injury_events)
barplot(top_injury_events)
injured_by_event <- tapply(data$INJURIES, data$EVTYPE, sum, simplify = FALSE)
injured_by_event <- sort(injured_by_event, decreasing = TRUE)
top_injury_events <- head(injured_by_event, n=20L)
barplot(top_injury_events)
library(ggplot2)
injured_by_event <- tapply(data$INJURIES, data$EVTYPE, sum, simplify = TRUE)    # simply returns a scalar not list
injured_by_event <- sort(injured_by_event, decreasing = TRUE)
top_injury_events <- head(injured_by_event, n=20L)
barplot(top_injury_events)
barplot(top_injury_events, horiz=TRUE)
injured_by_event <- tapply(data$INJURIES, data$EVTYPE, sum, simplify = TRUE)    # simply returns a scalar not list
injured_by_event <- sort(injured_by_event, decreasing = FALSE)
top_injury_events <- head(injured_by_event, n=20L)
barplot(top_injury_events, horiz=TRUE)
injured_by_event <- tapply(data$INJURIES, data$EVTYPE, sum, simplify = TRUE)    # simply returns a scalar not list
injured_by_event <- sort(injured_by_event, decreasing = TRUE)
top_injury_events <- head(injured_by_event, n=20L)
barplot(top_injury_events, horiz=TRUE)
?barplot
library(lattice)
barchart(top_injury_events)
top_injury_events <- sort(top_injury_events, decreasing = FALSE)
barchart(top_injury_events)
deaths_by_event <- tapply(data$FATALITIES, data$EVTYPE, sum, simplify = TRUE)    # simply returns a scalar not list
deaths_by_event <- sort(deaths_by_event, decreasing = TRUE)
top_death_events <- head(deaths_by_event, n=20L)
top_death_events <- sort(top_death_events, decreasing = FALSE)                # reverse sort
barchart(top_death_events)
barchart(top_death_events, col="red")
barchart(top_injury_events)
barchart(top_death_events, col="red")
barchart(top_injury_events)
top_injury_events
print(top_injury_events)
?print
print.table(top_injury_events)
?print.table
?table
library(xtable)
mytable <- xtable(top_injury_events)
str(top_injury_events)
str(top_injury_events[1:20,])
str(top_injury_events[1:20])
mytable <- xtable(top_injury_events[])
mytable <- xtable(top_injury_events[1:20])
deaths_by_event <- tapply(data$FATALITIES, data$EVTYPE, sum, simplify = TRUE)   # simply returns a scalar not list
deaths_by_event <- sort(deaths_by_event, decreasing = TRUE)
top_death_events <- head(deaths_by_event, n=20L)
top_death_events <- sort(top_death_events, decreasing = FALSE)                  # reverse sort order
barchart(top_death_events, col="red")
library(lattice)
injured_by_event <- tapply(data$INJURIES, data$EVTYPE, sum, simplify = TRUE)    # simply returns a scalar not list
injured_by_event <- sort(injured_by_event, decreasing = TRUE)
top_injury_events <- head(injured_by_event, n=20L)
top_injury_events <- sort(top_injury_events, decreasing = FALSE)                # reverse sort order
barchart(top_injury_events)
deaths_by_event <- tapply(data$FATALITIES, data$EVTYPE, sum, simplify = TRUE)   # simply returns a scalar not list
deaths_by_event <- sort(deaths_by_event, decreasing = TRUE)
top_death_events <- head(deaths_by_event, n=20L)
top_death_events <- sort(top_death_events, decreasing = FALSE)                  # reverse sort order
barchart(top_death_events, col="red")
#print(xtable(head(combo2), type="html"))
setwd("~/GitHub/learn")
